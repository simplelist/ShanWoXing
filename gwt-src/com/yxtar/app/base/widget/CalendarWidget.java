package com.yxtar.app.base.widget;import java.util.ArrayList;import java.util.Date;import java.util.List;import com.google.gwt.core.shared.GWT;import com.google.gwt.event.dom.client.ClickEvent;import com.google.gwt.event.dom.client.ClickHandler;import com.google.gwt.i18n.client.DateTimeFormat;import com.google.gwt.user.client.Element;import com.google.gwt.user.client.ui.Button;import com.google.gwt.user.client.ui.Composite;import com.google.gwt.user.client.ui.FlexTable;import com.google.gwt.user.client.ui.FlowPanel;import com.google.gwt.user.client.ui.HTMLTable.CellFormatter;import com.google.gwt.user.client.ui.HorizontalPanel;import com.google.gwt.user.client.ui.Label;import com.google.gwt.user.client.ui.SourcesTableEvents;import com.google.gwt.user.client.ui.TableListener;import com.google.gwt.user.client.ui.VerticalPanel;import com.yxtar.app.base.constants.CalendarConstants;//date picker build on base widgetpublic class CalendarWidget extends Composite {//  @Override//  public void onClick(ClickEvent event) {////  }  Element currentElement = null;  CalendarConstants message = GWT.create(CalendarConstants.class);  // define some base-widget  final private Button leftButton = new Button("");  final private Button rightButton = new Button("");  final private Label monthLabel = new Label(message.month());  final private Label currentDatelLabel = new Label("current Date");  final private FlexTable headerTable = new FlexTable();  final private FlexTable showTable = new FlexTable();  final private VerticalPanel totalpPanel = new VerticalPanel();  final private HorizontalPanel topPanel = new HorizontalPanel();  final private HorizontalPanel bottomPanel = new HorizontalPanel();  final private VerticalPanel hPanel = new VerticalPanel();  private List<CalendarEventHandler> handlerList = new ArrayList<CalendarEventHandler>();  private Date date = null;  private int month = 0;  private int[] monDays = null;  // final TextBox dateTextBox = new TextBox();  final Button cancel = new Button(message.cancel());  private FlowPanel body = new FlowPanel();    // Constructor used to initWidget  public CalendarWidget() {    // layout them    leftButton.setStylePrimaryName("button-left");    rightButton.setStylePrimaryName("button-right");    cancel.setStyleName("button-cancel");    // add base-widget into CalendarWidget and layout them in order    initWidget(totalpPanel);    totalpPanel.add(body);    body.add(topPanel);    body.add(hPanel);    body.add(bottomPanel);    topPanel.add(leftButton);    topPanel.add(currentDatelLabel);    topPanel.add(monthLabel);    topPanel.add(rightButton);    hPanel.add(headerTable);    topPanel.setStyleName("topPanel");        headerTable.setVisible(true);    headerTable.setStyleName("headerTable");    showTable.setStyleName("showTable1");      // set headerTable Sunday--Saturday    headerTable.setText(0, 0, message.Sunday());    headerTable.setText(0, 1, message.Monday());    headerTable.setText(0, 2, message.Tuesday());    headerTable.setText(0, 3, message.Wednesday());    headerTable.setText(0, 4, message.Thursday());    headerTable.setText(0, 5, message.Friday());    headerTable.setText(0, 6, message.Saturday());    hPanel.add(showTable);    showTable.setCellPadding(1);    showTable.setCellSpacing(1);    hPanel.add(cancel);        cancel.addClickHandler(new ClickHandler() {        @Override        public void onClick(ClickEvent event) {          for (CalendarEventHandler handler : handlerList) {            handler.onCancel();          }        }      });    // right month+1    rightButton.addClickHandler(new ClickHandler() {      @Override      public void onClick(ClickEvent event) {        int m = Integer.parseInt(currentDatelLabel.getText().substring(5)) + 1;        int y = Integer.parseInt(currentDatelLabel.getText().substring(0, 4));        if (m == 13) {          y++;          m = 1;        }        refreshData(y, m);        currentDatelLabel.setText(y + message.year() + m);      }    });    // leftButton month-1    leftButton.addClickHandler(new ClickHandler() {      @Override      public void onClick(ClickEvent event) {        int m = Integer.parseInt(currentDatelLabel.getText().substring(5)) - 1;        int y = Integer.parseInt(currentDatelLabel.getText().substring(0, 4));        if (m == 0) {          y--;          m = 12;        }        refreshData(y, m);        currentDatelLabel.setText(y + message.year() + m);      }    });  }  String clickDate = null;  // refresh showTable to show the month days in view  @SuppressWarnings("deprecation")  private void refreshData(int year, int month) {    showTable.removeAllRows();    ArrayList<Integer> dateList = new ArrayList<Integer>();    // get weekday add date list weekday's null    for (int i = 0; i <= getWeek(year, month) + 1; i++) {      if (i % 7 != 0) {        dateList.add(0);      }    }    for (int i = 1; i <= monDays[month - 1]; i++) {      dateList.add(i);    }    final CellFormatter cellFormatter = showTable.getCellFormatter();    int yy = date.getYear() + 1900;    int mm = date.getMonth() + 1;    int dd = date.getDate();    for (int d = 0; d < dateList.size(); d++) {      int rowNumber = d / 7;      int colNumber = d % 7;      showTable.setText(rowNumber, colNumber, dateList.get(d) + "");      if (dateList.get(d) == 0) {        showTable.setText(rowNumber, colNumber, "");      }      // if is currentDate , yes then "highLight"      if (dateList.get(d) == dd && month == mm && yy == year) {        cellFormatter.getElement(rowNumber, colNumber).addClassName("highLight");      }    }    // event for when you click same cell    showTable.addTableListener(new TableListener() {      @Override      @Deprecated      public void onCellClicked(SourcesTableEvents sender, int row, int cell) {        if (!showTable.getText(row, cell).trim().equals("")) {          if (currentElement != null) {            currentElement.removeClassName("selectDate");          }          currentElement = cellFormatter.getElement(row, cell);          currentElement.addClassName("selectDate");          clickDate = currentDatelLabel.getText().substring(0, 4) + "-" + currentDatelLabel.getText().substring(5)              + "-" + showTable.getText(row, cell);          for (CalendarEventHandler handler : handlerList) {            Date time = DateTimeFormat.getShortDateFormat().parse(clickDate);            handler.onClick(time);            // dateTextBox.setText(time + "");          }        }      }    });    currentDatelLabel.setText(year + message.year() + month);    dateList.clear();  }  // count from 1900 to current year month not include current month  private int totalDayFrom1900(int year, int month) {    int totalDay = 0;    // sum years get day    for (int i = 1900; i < year; i++) {      if (isLeapYear(year)) {        totalDay += 366;      } else {        totalDay += 365;      }    }    // sum month get days one year    for (int i = 0; i < month; i++) {      totalDay += dayOfMonth(year, i);    }    return totalDay;  }  // enter year and month get week  private int getWeek(int year, int month) {    int totalDay = totalDayFrom1900(year, month);    int week = totalDay % 7;    return week;  }  // get current month days  private int dayOfMonth(int year, int month) {    switch (month) {    case 1:    case 3:    case 5:    case 7:    case 8:    case 10:    case 12:      return 31;    case 4:    case 6:    case 9:    case 11:      return 30;    case 2:      return isLeapYear(year) ? 29 : 28;    default:      return 0;    }  }  private boolean isLeapYear(int year) {    if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) {      return true;    }    return false;  }    public void setDate(Date dates){	  if(dates!=null){		  this.date = dates;	  }else{		  this.date = new Date();	  }	  month = date.getMonth() + 1;	  monDays = new int[] { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };	  setday();  }    public void setday(){	    // get current year	    final int years = this.date.getYear() + 1900;	    // int year = date.getYear();	    // year isLeapYear???	    if (((years) % 4 == 0 && (years) % 100 != 0) || (years) % 400 == 0) {	      monDays[1]++;	    }	    currentDatelLabel.setText(years + message.year() + month);	    showTable.setVisible(true);	    // set day to showTable	    refreshData(years, month);  }   // get date from widget	public Date getDate() {		if (clickDate == null) {			return null;		} else {			Date time = DateTimeFormat.getShortDateFormat().parse(clickDate);			return time;		}	}  // show year-month 's calendar onLoad  // two parameters year,and month  public void setDisplayMonth(int year, int month) {    refreshData(year, month);  }  // add eventHandler  public void addCalendarEventHandler(CalendarEventHandler handler) {    this.handlerList.add(handler);  }  // add eventHandler  public void clearHandler() {    this.handlerList.clear();  }    public void setSize(int width,int height){	  totalpPanel.setSize(width+"px",height+"px");	    topPanel.setSize(width+"px","50px");	    headerTable.setSize(width+"px","50px");	    showTable.setSize(width+"px",height-150+"px");  }  public interface CalendarEventHandler {    // do something when you click this Widget    void onClick(Date date);    void onCancel();  }}