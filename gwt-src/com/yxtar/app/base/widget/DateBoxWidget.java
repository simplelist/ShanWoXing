package com.yxtar.app.base.widget;import java.util.Date;import com.google.gwt.event.dom.client.ClickEvent;import com.google.gwt.event.dom.client.ClickHandler;import com.google.gwt.event.dom.client.MouseOutEvent;import com.google.gwt.event.dom.client.MouseOutHandler;import com.google.gwt.event.dom.client.MouseOverEvent;import com.google.gwt.event.dom.client.MouseOverHandler;import com.google.gwt.i18n.client.DateTimeFormat;import com.google.gwt.user.client.ui.Button;import com.google.gwt.user.client.ui.Composite;import com.google.gwt.user.client.ui.HasAlignment;import com.google.gwt.user.client.ui.HorizontalPanel;import com.google.gwt.user.client.ui.TextBox;import com.yxtar.app.base.widget.CalendarWidget.CalendarEventHandler;// DateBoxWidget to implements eventpublic class DateBoxWidget extends Composite implements CalendarEventHandler {  final HorizontalPanel datePanel = new HorizontalPanel();  final HorizontalPanel editPanel = new HorizontalPanel();  final HorizontalPanel inputPanel = new HorizontalPanel();  final TextBox dateTextBox = new TextBox();  final Button delete = new Button();  final Button dateButton = new Button();  Date date = null;  // default date format  DateTimeFormat defauTimeFormat = DateTimeFormat.getFormat("yyyy-MM-dd");  HolderCalendar holderCalendar;  protected DateBoxWidget() {    datePanel.setWidth("204");    editPanel.setWidth("204");    initWidget(datePanel);    datePanel.add(editPanel);    editPanel.add(dateTextBox);    editPanel.add(dateButton);    datePanel.setVerticalAlignment(HasAlignment.ALIGN_MIDDLE);    editPanel.setVerticalAlignment(HasAlignment.ALIGN_MIDDLE);    dateTextBox.setStylePrimaryName("input-box-default");    dateButton.setStylePrimaryName("input-button-default");    dateButton.addStyleName(("input-button-recommend-button"));    dateButton.addClickHandler(new ClickHandler() {      @Override      public void onClick(ClickEvent event) {        if (holderCalendar != null) {          holderCalendar.setHandler(DateBoxWidget.this);          holderCalendar.show();        }      }    });  }  protected DateBoxWidget(boolean flag) {    datePanel.setWidth("204");    editPanel.setWidth("204");    initWidget(datePanel);    datePanel.add(editPanel);    inputPanel.add(dateTextBox);    inputPanel.add(delete);    editPanel.add(inputPanel);    editPanel.add(dateButton);    datePanel.setVerticalAlignment(HasAlignment.ALIGN_MIDDLE);    editPanel.setVerticalAlignment(HasAlignment.ALIGN_MIDDLE);    dateTextBox.setStylePrimaryName("input-box-default");    dateButton.setStylePrimaryName("input-button-default");    dateButton.addStyleName(("input-button-recommend-button"));    delete.getElement().addClassName("date_del_btn");    inputPanel.getElement().setAttribute("style", "border:1px solid #edeeee;width:165px;");    delete.setVisible(false);    inputPanel.addDomHandler(new MouseOverHandler() {      @Override      public void onMouseOver(MouseOverEvent event) {        if (!dateTextBox.getText().equals("")) {          delete.setVisible(true);        }      }    }, MouseOverEvent.getType());        inputPanel.addDomHandler(new MouseOutHandler() {            @Override      public void onMouseOut(MouseOutEvent event) {        delete.setVisible(false);      }    }, MouseOutEvent.getType());    dateButton.addClickHandler(new ClickHandler() {      @Override      public void onClick(ClickEvent event) {        if (holderCalendar != null) {          holderCalendar.setHandler(DateBoxWidget.this);          holderCalendar.show();        }      }    });    delete.addClickHandler(new ClickHandler() {      @Override      public void onClick(ClickEvent event) {        date = null;        dateTextBox.setText("");      }    });  }  public DateBoxWidget(Boolean flag, HolderCalendar holderCalendar) {    this(flag);    this.holderCalendar = holderCalendar;  }  public DateBoxWidget(HolderCalendar holderCalendar) {    this();    this.holderCalendar = holderCalendar;  }  @Override  public void onClick(Date date) {    this.date = date;    if (date != null) {      dateTextBox.setText(this.defauTimeFormat.format(date));    } else {      dateTextBox.setText("");    }    holderCalendar.hide();  }  public Date getDate() {    Date newDate = null;    try {      newDate = DateTimeFormat.getShortDateFormat().parse(dateTextBox.getText().trim());    } catch (IllegalArgumentException e) {      newDate = null;    }    if (newDate == null) {      dateTextBox.setText("");      this.date = null;    }    return newDate;  }  @Override  public void onCancel() {    holderCalendar.hide();  }  public final void setButtonStyle(String style) {    dateButton.addStyleName(style);  }  public final void setInputStyle(String style) {    dateTextBox.addStyleName(style);  }  public TextBox getInputBox() {    return dateTextBox;  }  // set date format from user-customer  public void setDefauTimeFormat(DateTimeFormat defauTimeFormat) {    this.defauTimeFormat = defauTimeFormat;  }  public void setSize(String width, int height) {    dateTextBox.setSize(width, height + "px");  }  // control date picker is show or hide  public interface HolderCalendar {    void show();    void hide();    void setHandler(CalendarEventHandler handler);  }}